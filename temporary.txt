.
├── .env                        
├── docker-compose.yml          
├── secrets/                    
│   └── website-public-key.pem      
├── api-gateway/                
│   ├── kong.yml    
|   └── jwt.conf
├── transfer-service/           
│   ├── src/
│   │   └── app.js
│   ├── Dockerfile
│   └── package.json
├── gas-service/                
│   ├── src/
│   │   └── app.js
│   ├── Dockerfile
│   └── package.json
└── balance-service/            
    ├── src/
    │   └── app.js
    ├── Dockerfile
    └── package.json


.env

# Блокчейн
RPC_URL=https://sepolia.infura.io/v3/6076e12f65824d14afae1d7ca5c8aeba
TOKEN_ADDRESS=0x36db7eBb1303AC0788fAA49b3B18de6fF8aAd453
WALLET_ADDRESS=0x702360b0177c0f6f4DE8136D4b7E7674c4ACFEf4

# Vault
VAULT_TOKEN="root"

# JWT
JWT_ISSUER="auth-service"

API_KEY=your_strong_password_here

docker-compose.yml 

services:
  # База данных для Kong
  kong-database:
    image: postgres:13
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Инициализация Kong
  kong-migrations:
    image: kong:latest
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: kong
    command: kong migrations bootstrap
    restart: on-failure

  # API Gateway
  kong:
    image: kong:latest
    depends_on:
      - kong-database
      - kong-migrations
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000"  # Прокси
      - "8001:8001"  # Admin API
    volumes:
      - ./api-gateway/kong.yml:/etc/kong/kong.yml
      - ./api-gateway/jwt.conf:/etc/kong/declarative/jwt.conf
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Vault для хранения ключей
  vault:
    image: hashicorp/vault:latest
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "root"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    restart: unless-stopped

  # Микросервисы
  balance-service:
    build:
      context: ./balance-service
      dockerfile: Dockerfile
    environment:
      - RPC_URL=${RPC_URL}
      - TOKEN_ADDRESS=${TOKEN_ADDRESS}
    volumes:
      - ./secrets/website-public-key.pem:/app/secrets/website-public-key.pem
    ports:
      - "3000:3000"
    depends_on:
      - kong
    restart: unless-stopped

  gas-service:
    build:
      context: ./gas-service
      dockerfile: Dockerfile
    environment:
      - RPC_URL=${RPC_URL}
    volumes:
      - ./secrets/website-public-key.pem:/app/secrets/website-public-key.pem
    ports:
      - "3001:3001"
    depends_on:
      - kong
    restart: unless-stopped

  transfer-service:
    build:
      context: ./transfer-service
      dockerfile: Dockerfile
    environment:
      - RPC_URL=${RPC_URL}
      - TOKEN_ADDRESS=${TOKEN_ADDRESS}
      - WALLET_ADDRESS=${WALLET_ADDRESS}
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN}
    volumes:
      - ./secrets/website-public-key.pem:/app/secrets/website-public-key.pem
    ports:
      - "3002:3002"
    depends_on:
      - kong
      - vault
    restart: unless-stopped

volumes:
  kong_data:

secrets:
  website-public-key:
    file: ./secrets/website-public-key.pem

  kong:
    image: kong:latest
    depends_on:
      - kong-database
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    restart: unless-stopped

secrets:
  website-public-key:
    file: ./secrets/website-public-key

website-public-key.pem

your-256-bit-secret-keep-it-safe-1234567890

kong.yml 

_format_version: "3.0"
services:
  - name: transfer-service
    url: http://transfer-service:3002
    routes:
      - name: transfer-route
        paths: ["/transfer"]
        methods: ["POST"]
        strip_path: true
        plugins:
          - name: jwt
            config:
              secret_is_base64: false
              key_claim_name: iss
              claims_to_verify: ["exp"]

  - name: balance-service
    url: http://balance-service:3000
    routes:
      - name: balance-route
        paths: ["/balance/check-tokens"]
        methods: ["POST"]
        strip_path: true

  - name: gas-service
    url: http://gas-service:3001
    routes:
      - name: gas-route
        paths: ["/gas/check-tx-gas"]
        methods: ["POST"]
        strip_path: true

  - name: health-checks
    url: http://transfer-service:3002
    routes:
      - name: health-route
        paths: ["/health"]
        methods: ["GET"]

jwt.conf

plugins:
  - name: jwt
    config:
      secret_is_base64: false
      key_claim_name: iss
      claims_to_verify: ["exp"]


transfer-service/src/app.js

require('dotenv').config();
const express = require('express');
const jwt = require('jsonwebtoken');
const fs = require('fs');
const { ethers } = require('ethers');
const axios = require('axios');

const app = express();
app.use(express.json());

// Конфигурация
const {
  RPC_URL,
  TOKEN_ADDRESS,
  WALLET_ADDRESS,
  VAULT_ADDR = 'http://vault:8200',
  VAULT_TOKEN = 'root'
} = process.env;

const provider = new ethers.JsonRpcProvider(RPC_URL);
const PUBLIC_KEY = fs.readFileSync('./secrets/website-public-key.pem', 'utf8');

// JWT Auth Middleware
const authenticateJWT = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader) return res.status(401).json({ error: 'Authorization header missing' });

  const token = authHeader.split(' ')[1];
  jwt.verify(token, PUBLIC_KEY, { algorithms: ['ES256'] }, (err, user) => {
    if (err) return res.status(403).json({ error: 'Invalid token', details: err.message });
    req.user = user;
    next();
  });
};

// Подпись через Vault
async function signWithVault(unsignedTx) {
  const response = await axios.post(
    `${VAULT_ADDR}/v1/secrets/eth/sign`,
    { unsignedTx },
    { headers: { 'X-Vault-Token': VAULT_TOKEN } }
  );
  if (!response.data.signedTx) throw new Error('Vault returned empty signed transaction');
  return response.data.signedTx;
}

// Эндпоинт /transfer
app.post('/transfer', authenticateJWT, async (req, res) => {
  try {
    const { userAddress, amount } = req.body;

    // Проверка газа
    const gasCheck = await axios.post('http://gas-service:3001/check-tx-gas', {
      senderWallet: WALLET_ADDRESS,
      tokenContract: TOKEN_ADDRESS,
      amount
    });

    if (!gasCheck.data.hasEnoughEth) {
      return res.status(400).json({ 
        error: 'Insufficient ETH for gas',
        required: gasCheck.data.requiredGas,
        available: gasCheck.data.currentBalance
      });
    }

    // Проверка баланса
    const balanceCheck = await axios.post('http://balance-service:3000/check-tokens', {
      senderWallet: WALLET_ADDRESS,
      tokenContract: TOKEN_ADDRESS,
      amount
    });

    if (!balanceCheck.data.hasEnoughTokens) {
      return res.status(400).json({
        error: 'Insufficient token balance',
        required: amount,
        available: balanceCheck.data.currentBalance
      });
    }

    // Подготовка транзакции
    const contract = new ethers.Contract(TOKEN_ADDRESS, [
      'function transfer(address, uint256) returns (bool)'
    ], provider);

    const unsignedTx = {
      to: TOKEN_ADDRESS,
      data: contract.interface.encodeFunctionData('transfer', [
        userAddress,
        ethers.parseUnits(amount, 18)
      ]),
      gasLimit: await contract.transfer.estimateGas(userAddress, ethers.parseUnits(amount, 18)),
      gasPrice: await provider.getGasPrice(),
      nonce: await provider.getTransactionCount(WALLET_ADDRESS)
    };

    const signedTx = await signWithVault(unsignedTx);
    const txResponse = await provider.sendTransaction(signedTx);
    res.json({ success: true, txHash: txResponse.hash });

  } catch (error) {
    console.error('Transfer error:', error);
    res.status(500).json({ error: error.message });
  }
});

// Health Check
app.get('/health', (req, res) => {
  res.json({ status: 'OK' });
});

const PORT = process.env.PORT || 3002;
app.listen(PORT, () => console.log(`Transfer Service running on port ${PORT}`));

gas-service/src/app.js

require('dotenv').config();
const express = require('express');
const { ethers } = require('ethers');
const jwt = require('jsonwebtoken');
const fs = require('fs');

const app = express();
app.use(express.json());

const PUBLIC_KEY = fs.readFileSync('./secrets/website-public-key.pem', 'utf8');
const provider = new ethers.JsonRpcProvider(process.env.RPC_URL);

// JWT Middleware
const authenticateJWT = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader) return res.status(401).json({ error: 'Authorization header missing' });

  const token = authHeader.split(' ')[1];
  jwt.verify(token, PUBLIC_KEY, { algorithms: ['ES256'] }, (err) => {
    if (err) return res.status(403).json({ error: 'Invalid token' });
    next();
  });
};

// Проверка газа
app.post('/check-tx-gas', authenticateJWT, async (req, res) => {
  try {
    const { senderWallet, tokenContract, amount } = req.body;

    const contract = new ethers.Contract(tokenContract, [
      'function transfer(address, uint256) returns (bool)'
    ], provider);

    const [gasPrice, ethBalance, gasLimit] = await Promise.all([
      provider.getGasPrice(),
      provider.getBalance(senderWallet),
      contract.transfer.estimateGas(
        senderWallet,
        ethers.parseUnits(amount, 18))
    ]);

    const gasCost = gasPrice * gasLimit;
    const hasEnoughEth = ethBalance >= gasCost;

    res.json({
      hasEnoughEth,
      requiredGas: ethers.formatEther(gasCost),
      currentBalance: ethers.formatEther(ethBalance)
    });

  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Health Check
app.get('/health', (req, res) => {
  res.json({ status: 'OK' });
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => console.log(`Gas Service running on port ${PORT}`));

balance-service/src/app.js

require('dotenv').config();
const express = require('express');
const { ethers } = require('ethers');
const jwt = require('jsonwebtoken');
const fs = require('fs');

const app = express();
app.use(express.json());

const PUBLIC_KEY = fs.readFileSync('./secrets/website-public-key.pem', 'utf8');
const provider = new ethers.JsonRpcProvider(process.env.RPC_URL);

// JWT Middleware
const authenticateJWT = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader) return res.status(401).json({ error: 'Authorization header missing' });

  const token = authHeader.split(' ')[1];
  jwt.verify(token, PUBLIC_KEY, { algorithms: ['ES256'] }, (err) => {
    if (err) return res.status(403).json({ error: 'Invalid token' });
    next();
  });
};

// Проверка баланса токенов
app.post('/check-tokens', authenticateJWT, async (req, res) => {
  try {
    const { senderWallet, tokenContract, amount } = req.body;

    const contract = new ethers.Contract(tokenContract, [
      'function balanceOf(address) view returns (uint256)'
    ], provider);

    const balance = await contract.balanceOf(senderWallet);
    const required = ethers.parseUnits(amount, 18);

    res.json({
      hasEnoughTokens: balance >= required,
      currentBalance: ethers.formatEther(balance),
      requiredAmount: amount
    });

  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Health Check
app.get('/health', (req, res) => {
  res.json({ status: 'OK' });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Balance Service running on port ${PORT}`));

gas-service dockerfile

FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install --production
COPY src/ ./src/
EXPOSE 3001
CMD ["node", "src/app.js"]

balance-service dockerfile

FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install --production
COPY src/ ./src/
EXPOSE 3002
CMD ["node", "src/app.js"]

transfer-service dockerfile

FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install --production
COPY src/ ./src/
EXPOSE 3002
CMD ["node", "src/app.js"]












Проблемы и рекомендации:
Дублирование кода

В каждом сервисе повторяется код JWT-аутентификации.

Рекомендация: Вынести middleware в отдельный npm-пакет или shared volume.

Нет валидации входных данных

В transfer-service нет проверки userAddress и amount.

Рекомендация: Добавить валидацию (например, ethers.isAddress, проверка amount > 0).

Vault в dev-режиме

В docker-compose.yml Vault запускается с VAULT_DEV_ROOT_TOKEN_ID="root".

Рекомендация: Настроить production-режим с TLS и секретными томами.

Нет логгирования

В сервисах нет структурированных логов (например, winston или morgan).

Рекомендация: Добавить логирование запросов и ошибок.

Нет тестов

В проекте отсутствуют unit- и интеграционные тесты.

Рекомендация: Добавить тесты (например, jest + supertest).

Ошибки в docker-compose.yml

Дублируется секция secrets и kong.

У balance-service и transfer-service одинаковый порт 3002.

Рекомендация: Починить конфигурацию.

Нет rate limiting

В Kong не настроен плагин для ограничения запросов.

Рекомендация: Добавить rate-limiting в kong.yml.

Публичный ключ в открытом виде

website-public-key.pem лежит в репозитории (хотя это публичный ключ, но лучше хранить в vault).

Рекомендация: Генерировать ключи при деплое или использовать Vault.

